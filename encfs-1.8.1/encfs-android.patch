--- ./configure.ac	2015-03-24 21:45:16.000000000 +0100
+++ ./configure.ac	2015-12-25 15:44:35.000000000 +0100
@@ -64,46 +64,46 @@
 AX_CXX_COMPILE_STDCXX_11
 
 dnl Look for fuse headers.
-AX_EXT_HAVE_HEADER(fuse.h, /usr/include/fuse /usr/local/include/fuse \
-                   /opt/include/fuse /opt/local/include/fuse \
-                   /usr/include/osxfuse /usr/local/include/osxfuse \
-                   /opt/local/include/osxfuse)
+dnl AX_EXT_HAVE_HEADER(fuse.h, /usr/include/fuse /usr/local/include/fuse \
+dnl                    /opt/include/fuse /opt/local/include/fuse \
+dnl                    /usr/include/osxfuse /usr/local/include/osxfuse \
+dnl                    /opt/local/include/osxfuse)
 
 dnl Ensure the necessary paths are added to LDPATH
-AX_EXT_HAVE_LIB(/usr/lib /usr/local/lib /opt/lib /opt/local/lib, fuse,
-                fuse_mount, [])
-AX_EXT_HAVE_LIB(/usr/lib /usr/local/lib /opt/lib /opt/local/lib, osxfuse,
-                fuse_mount, [])
+dnl AX_EXT_HAVE_LIB(/usr/lib /usr/local/lib /opt/lib /opt/local/lib, fuse,
+dnl                 fuse_mount, [])
+dnl AX_EXT_HAVE_LIB(/usr/lib /usr/local/lib /opt/lib /opt/local/lib, osxfuse,
+dnl                 fuse_mount, [])
 
 if test "$GXX" = "yes"; then
     CXXFLAGS="-W -Wall -Wpointer-arith -Wwrite-strings $CXXFLAGS"
     dnl CXXFLAGS="$CXXFLAGS -Wformat=2 -Wconversion"
 fi
 
-if test -z "${DARWIN_TRUE}"; then
-    dnl Prefer OSXFuse, but fall back to libfuse.
-    AC_CHECK_LIB(osxfuse, fuse_new, [FUSE_LIBS="$FUSE_LIBS -losxfuse"],
-        AC_CHECK_LIB(fuse, fuse_new, [FUSE_LIBS="$FUSE_LIBS -lfuse"],
-                    AC_MSG_ERROR([Unable to find libfuse or libosxfuse.])))
-else
+dnl if test -z "${DARWIN_TRUE}"; then
+dnl     dnl Prefer OSXFuse, but fall back to libfuse.
+dnl     AC_CHECK_LIB(osxfuse, fuse_new, [FUSE_LIBS="$FUSE_LIBS -losxfuse"],
+dnl         AC_CHECK_LIB(fuse, fuse_new, [FUSE_LIBS="$FUSE_LIBS -lfuse"],
+dnl                     AC_MSG_ERROR([Unable to find libfuse or libosxfuse.])))
+dnl else
     AC_CHECK_LIB(fuse, fuse_new, [FUSE_LIBS="$FUSE_LIBS -lfuse"],
                  AC_MSG_ERROR([Unable to find libfuse.]))
-fi
+dnl fi
 
 # check for a supported FUSE_MAJOR_VERSION.
-AC_MSG_CHECKING([For supported FUSE API version])
-AC_RUN_IFELSE([
-    AC_LANG_PROGRAM([[#include "fuse.h"]],
-[[
-    if (FUSE_MAJOR_VERSION < 2) return -1;
-    if (FUSE_MAJOR_VERSION > 2) return 0;
-    return FUSE_MINOR_VERSION >= 5 ? 0 : -1;
-]])],
-    [AC_MSG_RESULT([yes])],
-    [AC_MSG_RESULT([no])
-     AC_MSG_FAILURE([Encfs 1.3 requires FUSE 2.5 or newer.])
-    ]
-)
+dnl AC_MSG_CHECKING([For supported FUSE API version])
+dnl AC_RUN_IFELSE([
+dnl     AC_LANG_PROGRAM([[#include "fuse.h"]],
+dnl [[
+dnl     if (FUSE_MAJOR_VERSION < 2) return -1;
+dnl     if (FUSE_MAJOR_VERSION > 2) return 0;
+dnl     return FUSE_MINOR_VERSION >= 5 ? 0 : -1;
+dnl ]])],
+dnl     [AC_MSG_RESULT([yes])],
+dnl     [AC_MSG_RESULT([no])
+dnl      AC_MSG_FAILURE([Encfs 1.3 requires FUSE 2.5 or newer.])
+dnl     ]
+dnl )
 
 dnl fuse_operations.setxattr was added 2004-03-31
 dnl only enable it if setxattr function is found..
--- ./encfs/DirNode.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/DirNode.cpp	2015-12-25 14:08:04.000000000 +0100
@@ -30,7 +30,7 @@
 #include <cstdlib>
 #include <pthread.h>
 #include <unistd.h>
-#ifdef linux
+#if defined (linux) || defined (ANDROID)
 #include <sys/fsuid.h>
 #endif
 
@@ -491,13 +491,28 @@
   // if uid or gid are set, then that should be the directory owner
   int olduid = -1;
   int oldgid = -1;
+#ifndef ANDROID
   if (uid != 0) olduid = setfsuid(uid);
   if (gid != 0) oldgid = setfsgid(gid);
-
+#else
+  if (uid != 0) {
+    olduid = geteuid();
+    seteuid( uid );
+  }
+  if(gid != 0) {
+    oldgid = getegid();
+    setegid( gid );
+  }
+#endif
   int res = ::mkdir(cyName.c_str(), mode);
 
+#ifndef ANDROID
   if (olduid >= 0) setfsuid(olduid);
   if (oldgid >= 0) setfsgid(oldgid);
+#else
+  if (olduid >= 0) seteuid(olduid);
+  if (oldgid >= 0) setegid(oldgid);
+#endif
 
   if (res == -1) {
     int eno = errno;
--- ./encfs/FSConfig.h	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/FSConfig.h	2015-12-25 14:13:44.000000000 +0100
@@ -101,7 +101,9 @@
   unsigned char *getKeyData() const;
   unsigned char *getSaltData() const;
 
+#ifndef ANDROID
  private:
+#endif    
   CipherKey makeKey(const char *password, int passwdLen);
 };
 
--- ./encfs/FileNode.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/FileNode.cpp	2015-12-25 14:22:06.000000000 +0100
@@ -150,14 +150,24 @@
   int olduid = -1;
   int oldgid = -1;
   if (uid != 0) {
+#ifndef ANDROID
     olduid = setfsuid(uid);
+#else
+    olduid = geteuid();
+    seteuid(uid);
+#endif
     if (olduid == -1) {
       rInfo("setfsuid error: %s", strerror(errno));
       return -EPERM;
     }
   }
   if (gid != 0) {
+#ifndef ANDROID
     oldgid = setfsgid(gid);
+#else
+    oldgid = getegid();
+    setegid(gid);
+#endif
     if (oldgid == -1) {
       rInfo("setfsgid error: %s", strerror(errno));
       return -EPERM;
@@ -177,8 +187,13 @@
   else
     res = ::mknod(_cname.c_str(), mode, rdev);
 
+#ifndef ANDROID
   if (olduid >= 0) setfsuid(olduid);
   if (oldgid >= 0) setfsgid(oldgid);
+#else
+  if (olduid >= 0) seteuid(olduid);
+  if (oldgid >= 0) setegid(oldgid);
+#endif
 
   if (res == -1) {
     int eno = errno;
@@ -247,7 +262,7 @@
   int fh = io->open(O_RDONLY);
   if (fh >= 0) {
     int res = -EIO;
-#ifdef linux
+#if defined(linux) && !defined (ANDROID)
     if (datasync)
       res = fdatasync(fh);
     else
--- ./encfs/FileUtils.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/FileUtils.cpp	2015-12-25 16:40:25.000000000 +0100
@@ -43,6 +43,36 @@
 #include <fstream>
 #include <sstream>
 
+#ifndef FP_INFINITE
+/* Symbolic constants to classify floating point numbers. */
+#define	FP_INFINITE	0x01
+#define	FP_NAN		0x02
+#define	FP_NORMAL	0x04
+#define	FP_SUBNORMAL	0x08
+#define	FP_ZERO		0x10
+#define	fpclassify(x) \
+    ((sizeof (x) == sizeof (float)) ? __fpclassifyf(x) \
+    : (sizeof (x) == sizeof (double)) ? __fpclassifyd(x) \
+    : __fpclassifyl(x))
+
+#define	isfinite(x)					\
+    ((sizeof (x) == sizeof (float)) ? __isfinitef(x)	\
+    : (sizeof (x) == sizeof (double)) ? __isfinite(x)	\
+    : __isfinitel(x))
+#define	isinf(x)					\
+    ((sizeof (x) == sizeof (float)) ? __isinff(x)	\
+    : (sizeof (x) == sizeof (double)) ? isinf(x)	\
+    : __isinfl(x))
+#define	isnan(x)					\
+    ((sizeof (x) == sizeof (float)) ? __isnanf(x)	\
+    : (sizeof (x) == sizeof (double)) ? isnan(x)	\
+    : __isnanl(x))
+#define	isnormal(x)					\
+    ((sizeof (x) == sizeof (float)) ? __isnormalf(x)	\
+    : (sizeof (x) == sizeof (double)) ? __isnormal(x)	\
+    : __isnormall(x))
+#endif
+
 #include <boost/version.hpp>
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
@@ -382,6 +412,23 @@
   return Config_None;
 }
 
+#ifdef ANDROID
+/**
+ * Read config file from non-default location
+ */
+ConfigType readConfig_override(const shared_ptr<EncFS_Opts> &opts,
+     	                       const shared_ptr<EncFSConfig> &config) {
+  ConfigType type = Config_None;
+  if(!opts->configOverride.empty()) {
+    if(fileExists(opts->configOverride.c_str()))
+      type = readConfig_load(&ConfigFileMapping[0], opts->configOverride.c_str(), config);
+  } else {
+    type = readConfig(opts->rootDir, config);
+  }
+  return type;
+}
+#endif
+
 /**
  * Read config file in current "V6" XML format, normally named ".encfs6.xml"
  * This format is in use since Apr 13, 2008 (commit 6d081f5c)
@@ -1019,6 +1066,36 @@
     blockMACRandBytes = 0;  // using uniqueIV, so this isn't necessary
     externalIV = true;
     desiredKDFDuration = ParanoiaKDFDuration;
+#ifdef ANDROID    
+  } else if (configMode == Config_Compatible) {
+    // xgroup(setup)
+    cout << _("Compatible configuration selected.") << "\n";
+    // AES w/ 256 bit key, stream name encoding, no initialization
+    // vectors.
+    keySize = 256;
+    blockSize = DefaultBlockSize;
+    alg = findCipherAlgorithm("AES", keySize);
+    blockMACBytes = 0;
+    blockMACRandBytes = 0;
+    externalIV = false;
+    nameIOIface = StreamNameIO::CurrentInterface();
+    uniqueIV = false;
+    chainedIV = false;
+  } else if (configMode == Config_Quick) {
+    // xgroup(setup)
+    cout << _("Quick configuration selected.") << "\n";
+    // Blowfish w/ 128 bit key, stream name encoding, no
+    // initialization vectors
+    keySize = 128;
+    blockSize = DefaultBlockSize;
+    alg = findCipherAlgorithm("Blowfish", keySize);
+    blockMACBytes = 0;
+    blockMACRandBytes = 0;
+    externalIV = false;
+    nameIOIface = StreamNameIO::CurrentInterface();
+    uniqueIV = false;
+    chainedIV = false;
+#endif
   } else if (configMode == Config_Standard || answer[0] != 'x') {
     // xgroup(setup)
     cout << _("Standard configuration selected.") << "\n";
@@ -1138,6 +1215,11 @@
   // get user key and use it to encode volume key
   CipherKey userKey;
   rDebug("useStdin: %i", useStdin);
+#ifdef ANDROID
+  if (!opts->password.empty())
+    userKey = config->makeKey(opts->password.c_str(), opts->password.length());
+  else
+#endif        
   if (useStdin) {
     if (annotate) cerr << "$PROMPT$ new_passwd" << endl;
     userKey = config->getUserKey(useStdin);
@@ -1417,7 +1499,11 @@
 
   if (pid == 0) {
     const char *argv[4];
+#ifdef ANDROID
+    argv[0] = "/system/bin/sh";
+#else
     argv[0] = "/bin/sh";
+#endif
     argv[1] = "-c";
     argv[2] = passProg.c_str();
     argv[3] = 0;
@@ -1500,7 +1586,11 @@
   RootPtr rootInfo;
   shared_ptr<EncFSConfig> config(new EncFSConfig);
 
+#ifdef ANDROID
+  if (readConfig_override(opts, config) != Config_None) {
+#else
   if (readConfig(opts->rootDir, config) != Config_None) {
+#endif
     if (config->blockMACBytes == 0 && opts->requireMac) {
       cout
          << _("The configuration disabled MAC, but you passed --require-macs\n");
@@ -1538,6 +1628,11 @@
     // get user key
     CipherKey userKey;
 
+#ifdef ANDROID
+    if (!opts->password.empty())
+      userKey = config->makeKey(opts->password.c_str(), opts->password.length());
+    else
+#endif
     if (opts->passwordProgram.empty()) {
       rDebug("useStdin: %i", opts->useStdin);
       if (opts->annotate) cerr << "$PROMPT$ passwd" << endl;
--- ./encfs/FileUtils.h	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/FileUtils.h	2015-12-25 14:44:42.000000000 +0100
@@ -56,7 +56,11 @@
 
 typedef shared_ptr<EncFS_Root> RootPtr;
 
-enum ConfigMode { Config_Prompt, Config_Standard, Config_Paranoia };
+enum ConfigMode { Config_Prompt, Config_Standard, Config_Paranoia
+#ifdef ANDROID    
+                  , Config_Compatible, Config_Quick
+#endif
+};
 
 /**
  * EncFS_Opts stores internal settings
@@ -76,6 +80,10 @@
   std::string passwordProgram;  // path to password program (or empty)
   bool useStdin;  // read password from stdin rather then prompting
   bool annotate;  // print annotation line prompt to stderr.
+#ifdef ANDROID
+  std::string password; // supply password directly if encfs is used as a library
+  std::string configOverride; // override config file location
+#endif
 
   bool ownerCreate;  // set owner of new files to caller
 
--- ./encfs/RawFileIO.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/RawFileIO.cpp	2015-12-25 14:46:19.000000000 +0100
@@ -245,7 +245,7 @@
 
   if (fd >= 0 && canWrite) {
     res = ::ftruncate(fd, size);
-#if !defined(__FreeBSD__) && !defined(__APPLE__)
+#if !defined(__FreeBSD__) && !defined(__APPLE__) && !defined(ANDROID)
     ::fdatasync(fd);
 #endif
   } else
--- ./encfs/encfs.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/encfs.cpp	2015-12-25 15:55:57.000000000 +0100
@@ -24,6 +24,7 @@
 #include <dirent.h>
 #include <cerrno>
 #include <sys/statvfs.h>
+#include <sys/vfs.h>
 #include <sys/time.h>
 
 #include <sys/types.h>
@@ -386,13 +387,24 @@
     int oldgid = -1;
     if (ctx->publicFilesystem) {
       fuse_context *context = fuse_get_context();
+#ifndef ANDROID
       olduid = setfsuid(context->uid);
       oldgid = setfsgid(context->gid);
+#else
+      olduid = geteuid();
+      oldgid = getegid();
+      seteuid(context->uid);
+      setegid(context->gid);
+#endif
     }
     res = ::symlink(toCName.c_str(), fromCName.c_str());
+#ifndef ANDROID
     if (olduid >= 0) setfsuid(olduid);
     if (oldgid >= 0) setfsgid(oldgid);
-
+#else
+    if (olduid >= 0) seteuid(olduid);
+    if(oldgid >= 0)  setegid(oldgid);
+#endif
     if (res == -1)
       res = -errno;
     else
@@ -489,7 +501,11 @@
   tv[1].tv_sec = ts[1].tv_sec;
   tv[1].tv_usec = ts[1].tv_nsec / 1000;
 
+#ifndef ANDROID
   int res = lutimes(cyName.c_str(), tv);
+#else
+  int res = utimes(cyName.c_str(), tv);
+#endif    
   return (res == -1) ? -errno : ESUCCESS;
 }
 
--- ./encfs/encfsctl.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/encfsctl.cpp	2015-12-25 14:57:16.000000000 +0100
@@ -338,7 +338,11 @@
         fnode->getAttr(&stbuf);
 
         struct tm stm;
+#ifdef ANDROID
+	localtime_r((const time_t*)&stbuf.st_mtime, &stm);
+#else
         localtime_r(&stbuf.st_mtime, &stm);
+#endif
         stm.tm_year += 1900;
         // TODO: when I add "%s" to the end and name.c_str(), I get a
         // seg fault from within strlen.  Why ???
@@ -594,11 +598,13 @@
 
   int filesFound = showcruft(rootInfo, "/");
 
+#ifndef ANDROID
   // TODO: the singular version should say "Found an invalid file", but all the translations
   // depend upon this broken singular form, so it isn't easy to change.
   cerr << autosprintf(ngettext("Found %i invalid file.",
                                "Found %i invalid files.", filesFound),
                       filesFound) << "\n";
+#endif
 
   return EXIT_SUCCESS;
 }
--- ./encfs/main.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/main.cpp	2015-12-25 15:07:28.000000000 +0100
@@ -52,10 +52,12 @@
 
 #include "i18n.h"
 
+#ifndef ANDROID
 // Fuse version >= 26 requires another argument to fuse_unmount, which we
 // don't have.  So use the backward compatible call instead..
 extern "C" void fuse_unmount_compat22(const char *mountpoint);
 #define fuse_unmount fuse_unmount_compat22
+#endif
 
 /* Arbitrary identifiers for long options that do
  * not have a short version */
@@ -141,6 +143,10 @@
             "Auto unmount after period of inactivity\n"
             "  --anykey\t\t"
             "Do not verify correct key is being used\n"
+#ifdef ANDROID
+            "  --config=PATH\t\t"
+            "Use specified config file\n"
+#endif             
             "  --forcedecode\t\t"
             "decode data even if an error is detected\n"
             "\t\t\t(for filesystems using MAC block headers)\n")
@@ -217,6 +223,9 @@
       {"fuse-help", 0, 0, 'H'},         // fuse_mount usage
       {"idle", 1, 0, 'i'},              // idle timeout
       {"anykey", 0, 0, 'k'},            // skip key checks
+#ifdef ANDROID
+      {"config", 1, 0, 'c'},            // external config
+#endif
       {"no-default-flags", 0, 0, 'N'},  // don't use default fuse flags
       {"ondemand", 0, 0, 'm'},          // mount on-demand
       {"delaymount", 0, 0, 'M'},        // delay initial mount until use
@@ -287,6 +296,11 @@
       case 'k':
         out->opts->checkKey = false;
         break;
+#ifdef ANDROID
+      case 'c':
+        out->opts->configOverride.assign( optarg );
+        break;
+#endif
       case 'D':
         out->opts->forceDecode = true;
         break;
@@ -783,7 +797,11 @@
     // xgroup(diag)
     rWarning(_("Unmounting filesystem %s due to inactivity"),
              arg->mountPoint.c_str());
+#ifndef ANDROID
     fuse_unmount(arg->mountPoint.c_str());
+#else
+    fuse_unmount(arg->mountPoint.c_str(), NULL);
+#endif
     return true;
   }
 }
--- ./encfs/makeKey.cpp	2015-03-24 21:45:16.000000000 +0100
+++ ./encfs/makeKey.cpp	2015-12-25 16:45:16.000000000 +0100
@@ -28,6 +28,9 @@
 
 #include <sys/types.h>
 #include <unistd.h>
+#ifdef ANDROID
+#include <cstdlib>
+#endif
 
 using namespace std;
 
